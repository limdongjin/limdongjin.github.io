(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{206:function(e,n,t){"use strict";t.r(n);var a=t(0),r=Object(a.a)({},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._m(3),e._v(" "),t("p",[t("a",{attrs:{href:"http://woowabros.github.io/woowabros/2017/08/07/ebextension.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Elastic Beanstalk Configuration files posted by 우아한형제들 기술블로그"),t("OutboundLink")],1)])])},[function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"ebextensions-설정하기"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ebextensions-설정하기","aria-hidden":"true"}},[this._v("#")]),this._v(" ebextensions 설정하기")])},function(){var e=this.$createElement,n=this._self._c||e;return n("h3",{attrs:{id:"_01-nginx-config"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_01-nginx-config","aria-hidden":"true"}},[this._v("#")]),this._v(" "),n("code",[this._v("01_nginx.config")])])},function(){var e=this.$createElement,n=this._self._c||e;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('files:\n  "/etc/nginx/conf.d/01_proxy.conf":\n    mode: "000644"\n    owner: root\n    group: root\n    content: |\n      client_max_body_size 20M;\n\n  "/etc/nginx/conf.d/02_app_server.conf":\n    mode: "000644"\n    owner: root\n    group: root\n    content: |\n      # The content of this file is based on the content of /etc/nginx/conf.d/webapp_healthd.conf\n\n      # Change the name of the upstream because it can\'t have the same name\n      # as the one defined by default in /etc/nginx/conf.d/webapp_healthd.conf\n      upstream new_upstream_name {\n        server unix:///var/run/puma/my_app.sock;\n      }\n\n      # Change the name of the log_format because it can\'t have the same name\n      # as the one defined by default in /etc/nginx/conf.d/webapp_healthd.conf\n      log_format new_log_name_healthd \'$msec"$uri"\'\n                      \'$status"$request_time"$upstream_response_time"\'\n                      \'$http_x_forwarded_for\';\n\n      server {\n        listen 80;\n        server_name domainname.com; ### 여기에 도메인 이름을 적도록 하자!!  \n\n        if ($time_iso8601 ~ "^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})") {\n          set $year $1;\n          set $month $2;\n          set $day $3;\n          set $hour $4;\n        }\n\n        access_log  /var/log/nginx/access.log  main;\n        # Match the name of log_format directive which is defined above\n        access_log /var/log/nginx/healthd/application.log.$year-$month-$day-$hour new_log_name_healthd;\n\n        location / {\n          ####### if ( http 요청을 https로 redirect 시키고 싶다면 ) do #####\n          set $redirect 0;\n          if ($http_x_forwarded_proto != "https") {\n            set $redirect 1;\n          }\n          if ($http_user_agent ~* "ELB-HealthChecker") {\n            set $redirect 0;\n          }\n          if ($redirect = 1) {\n            return 301 https://$host$request_uri;\n          }\n          ######## end ##################################################\n          proxy_pass http://my_app; # match the name of upstream directive which is defined above\n          proxy_set_header Host $host;\n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n\n        location /assets {\n          alias /var/app/current/public/assets;\n          gzip_static on;\n          gzip on;\n          expires max;\n          add_header Cache-Control public;\n        }\n\n        location /public {\n          alias /var/app/current/public;\n          gzip_static on;\n          gzip on;\n          expires max;\n          add_header Cache-Control public;\n        }\n\n        location /files {\n          alias /var/app/current/public/ridiculously/long/path/to/files;\n          gzip_static on;\n          gzip on;\n          expires max;\n          add_header Cache-Control public;\n        }\n      }\n\ncontainer_commands:\n  01_reload_nginx:\n    command: "sudo service nginx reload"\n')])])])},function(){var e=this.$createElement,n=this._self._c||e;return n("h2",{attrs:{id:"유용한-링크들"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#유용한-링크들","aria-hidden":"true"}},[this._v("#")]),this._v(" 유용한 링크들")])}],!1,null,null,null);r.options.__file="README.md";n.default=r.exports}}]);