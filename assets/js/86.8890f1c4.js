(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{299:function(i,s,e){"use strict";e.r(s);var t=e(2),r=Object(t.a)({},function(){var i=this,s=i.$createElement,e=i._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[e("h1",{attrs:{id:"sp-5-sic-xe-의-addressing-mode-pc-relative-base-simple"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sp-5-sic-xe-의-addressing-mode-pc-relative-base-simple","aria-hidden":"true"}},[i._v("#")]),i._v(" [SP-5] SIC/XE 의 Addressing Mode (PC relative, Base, simple, ..)")]),i._v(" "),e("p",[i._v("이 글은 독자가 SIC/XE의 Instruction Format 을 이해했다는 전제하에 작성 되었습니다. SIC/XE의 Instruction Format 에 대한 내용은 "),e("a",{attrs:{href:"/system-programming/sp4-sicxe-structure"}},[i._v("이전 글")]),i._v(" 에서 확인 가능 합니다.")]),i._v(" "),e("h2",{attrs:{id:"standard-sic-instruction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#standard-sic-instruction","aria-hidden":"true"}},[i._v("#")]),i._v(" standard SIC instruction")]),i._v(" "),e("p",[i._v("n == 0 이고 i == 0 이면 SIC의 Instruction Format 으로 간주된다.")]),i._v(" "),e("p",[e("strong",[i._v("즉 b, p, e bits는 flag 로 간주하는 것이 아니라, SIC Instruction Format의 Address 의 일부분이라고 생각해야함. 놓치기 좋을만한 예외상황이므로 잘 기억하고있어야한다.")])]),i._v(" "),e("p",[e("img",{attrs:{src:"/images/sic-standard-inst.png",alt:""}})]),i._v(" "),e("h2",{attrs:{id:"target-address-ta-계산을-위한-mode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#target-address-ta-계산을-위한-mode","aria-hidden":"true"}},[i._v("#")]),i._v(" Target Address(TA) 계산을 위한 Mode")]),i._v(" "),e("ul",[e("li",[e("p",[i._v("Base Relative")]),i._v(" "),e("ul",[e("li",[e("strong",[i._v("b == 1, p == 0")]),i._v(" 일때 Base Relative")]),i._v(" "),e("li",[i._v("TA = disp + [B]")]),i._v(" "),e("li",[i._v("disp 을 12bit "),e("strong",[i._v("unsigned")]),i._v(" integer 로 해석 (disp: 0 ~ 4095)")])])]),i._v(" "),e("li",[e("p",[i._v("PC Relative")]),i._v(" "),e("ul",[e("li",[e("strong",[i._v("b == 0, p == 1")]),i._v(" 일때 PC Relative")]),i._v(" "),e("li",[i._v("TA = disp + [PC]")]),i._v(" "),e("li",[i._v("disp 을 12bit "),e("strong",[i._v("signed")]),i._v(" integer 로 해석 (disp: -2048 ~ 2047)")])])]),i._v(" "),e("li",[e("p",[i._v("Direct Addressing")]),i._v(" "),e("ul",[e("li",[e("strong",[i._v("b == 0, p == 0")]),i._v(" 일때")]),i._v(" "),e("li",[i._v("TA = disp")])])])]),i._v(" "),e("p",[i._v("(b 가 base 의 앞글자, p가 pc의 앞글자임을 생각하면, base, pc addressing의 조건을 바로 외울수있다. )")]),i._v(" "),e("p",[i._v("(주의,  b == 1 이면서 동시에 p == 1 인 경우는 에러 케이스라고 간주합니다.)")]),i._v(" "),e("p",[i._v("(앞서 말했듯이, standard sic instruction의 조건에 만족하는 경우에는 b, p field는 Addressing Mode 결정을 위해서 쓰이지않습니다. )")]),i._v(" "),e("ul",[e("li",[i._v("Index Addressing\n"),e("ul",[e("li",[e("strong",[i._v("x == 1")]),i._v(" 일때")]),i._v(" "),e("li",[i._v("TA = disp + [X]")]),i._v(" "),e("li",[e("strong",[i._v("주의. 다른 Addressing Mode 와 결합 할 수 있다")])]),i._v(" "),e("li",[e("strong",[i._v("ex) if b == 1, p == 0,  x == 1, TA = disp + [B] + [X]")])])])])]),i._v(" "),e("h2",{attrs:{id:"ta-해석을-위한-mode"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ta-해석을-위한-mode","aria-hidden":"true"}},[i._v("#")]),i._v(" TA 해석을 위한 Mode")]),i._v(" "),e("h3",{attrs:{id:"simple-immediate-indirect"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-immediate-indirect","aria-hidden":"true"}},[i._v("#")]),i._v(" Simple, Immediate, Indirect")]),i._v(" "),e("ul",[e("li",[e("p",[i._v("Simple Addressing")]),i._v(" "),e("ul",[e("li",[e("strong",[i._v("n == 1, i == 1")]),i._v(" 일때")]),i._v(" "),e("li",[i._v("TA(Target Address)로 메모리에 접근해서 값을 가져옴")]),i._v(" "),e("li",[i._v("예를들어, TA 가 0x123 이고 메모리 0x123 번지에는 0x030이라는 값이 들어있다면, 0x123을 사용하는 것임.")])])]),i._v(" "),e("li",[e("p",[i._v("Immediate Addressing")]),i._v(" "),e("ul",[e("li",[e("strong",[i._v("n == 0, i == 1")]),i._v(" 일때")]),i._v(" "),e("li",[i._v("메모리 reference 안함.")]),i._v(" "),e("li",[i._v("disp, address field 의 값을 주소 값으로 생각 안하고 그 자체를 값으로 생각함.")]),i._v(" "),e("li",[i._v("예를들어 disp 이 0x100 이라면, 0x100 번지의 값을 쓰는 것이 아니라, 0x100 이라는 값 그 자체를 사용하는 것임.")])])]),i._v(" "),e("li",[e("p",[i._v("Indirect Addressing")]),i._v(" "),e("ul",[e("li",[e("strong",[i._v("n == 1, i == 0")]),i._v(" 일때")]),i._v(" "),e("li",[i._v("TA 를 간접 주소로 해석한다.")]),i._v(" "),e("li",[i._v("포인터의 동작 방식을 생각하면 이해하기 쉽다.")])])])]),i._v(" "),e("h3",{attrs:{id:"simple-addressing-추가-설명"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#simple-addressing-추가-설명","aria-hidden":"true"}},[i._v("#")]),i._v(" Simple Addressing 추가 설명")]),i._v(" "),e("p",[e("img",{attrs:{src:"/images/sicxe-simple-addressing.png",alt:""}})]),i._v(" "),e("h3",{attrs:{id:"indirect-addressing-추가-설명"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#indirect-addressing-추가-설명","aria-hidden":"true"}},[i._v("#")]),i._v(" Indirect Addressing 추가 설명")]),i._v(" "),e("p",[e("img",{attrs:{src:"/images/sicxe-indirect.png",alt:""}})]),i._v(" "),e("pre",[e("code",[i._v('// indirect Addressing 의 이해를 위한 c 언어 예제\n\nint a = 10;\nint* ptr = a; // 포인터 변수 ptr 에는 a 변수의 주소가 저장된다. \n\nprintf("%d", *ptr); // 출력: 10\n\n// 10 이라는 값이 출력되기까지의 과정을 알고있다면 Indirect Addressing 을 알고있다고 볼수있다.\n\n// 1. 포인터 변수 ptr 에 저장된 값을 불러온다. 이는 a 변수의 주소 값이다\n// 2. a 변수의 주소값을 통해 a 변수로 접근\n// 3. a 변수에 저장된 값인 10을 불러온다. \n// 4. 10을 출력한다.\n\n// indirect Addressing 을 위한 예시\n\ndisp = 0x123 \n메모리 0x123 번지에 저장된 내용 = 0x200\n메모리 0x200 번지에 저장된 내용 = 0x300\n\n일때 indirect addressing 을 한다면?\n\n1. 메모리 0x123 번지에 저장된 값을 불러온다. 이는 0x200 이다\n2. 0x200번지에 저장된 값을 불러온다. 이는 0x300 이다\n')])]),i._v(" "),e("h2",{attrs:{id:"assembly-코드-레벨에서-indirect-immediate-구분"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#assembly-코드-레벨에서-indirect-immediate-구분","aria-hidden":"true"}},[i._v("#")]),i._v(" Assembly 코드 레벨에서 Indirect, Immediate 구분")]),i._v(" "),e("pre",[e("code",[i._v("\tJ @RETADR \n. @ 가 붙으면 Indirect Addressing\n\n\tCOMP #1\n. # 이 붙으면 Immediate Addressing")])])])},[],!1,null,null,null);s.default=r.exports}}]);